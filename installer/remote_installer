#!/usr/bin/env bash
set -x

# Standard vars
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
encryption_passphrase="changeme"
nix_config_repo="git@github.com:SsShigZzZ/nix-config.git"
nix_secret_repo="git@github.com:SsShigZzZ/nix-secrets.git"

# Cleanup temporary directory on exit
function cleanup() {
	rm -rf "$tmp_dir"
}

function my_rsync() {
  rsync -aP -e "ssh -i $deploy_prv_key" $@
}

function ssh_run() {
  ssh -i $deploy_prv_key $target_host -l root $@
}

# Help / Usage
function print_usage_and_exit() {
  cat <<EOF
Usage:
  $0 -t <target_host> -n <hostname>

Arguments:
  [ -t | --target ]
    The target hostname / IP address
  [ -n | --hostname ]
    The desired hostname / nix host configuration
  [ -f | --tokenfile ]
    The token file containing a valid github token with the following scopes:
      - Read / write keys
      - Read / write repos

Options:
  [ -d | --disko ]
    The disko layout
    Required if there is no default <hostname>.nix in the installer directory
EOF
exit 0
}

# Parse arguments
arg_parse=()
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      print_usage_and_exit
    ;;
    -t|--target)
      target_host=$2
      shift
      shift
    ;;
    -n|--hostname)
      target_hostname=$2
      shift
      shift
    ;;
    -f|--tokenfile)
      token_file=$2
      shift
      shift
    ;;
    *)
      echo 'Invalid agument'
      exit 1
    ;;
  esac
done
set -- "${arg_parse[@]}"
trap cleanup exit

### Preflight checks
# Ensure target and hostname are set
[ $target_host ] && [ $target_hostname ] && [ $token_file ] ||
  print_usage_and_exit

# Check github token exists
if ! [ -f $token_file ]; then
  echo "No token file found"
  print_usage_and_exit
fi

# Check if disko file exists for the hostname specified
disko_file="$script_dir/../nixos/$target_hostname/disko.nix"
if ! [ -f $disko_file ]; then
  echo "No disko file found; exiting"
  exit 1
fi

# Check github token is valid
github_token=$(cat $token_file)
while ! [[ $(curl -s -o /dev/null -I -w "%{http_code}" -H "Authorization: token $github_token" \
https://api.github.com/user/keys) -ne "401" ]]; do
	read -p "Enter valid personal access token or type 'EXIT' to cancel: "
	github_token=$REPLY
	if [[ $github_token == "EXIT" ]]; then
    echo "Exiting.."
    exit 1
	fi
done

### Directories and files
# Create a temp directory structure for file transfers
tmp_dir=$(mktemp -d --suffix=.nixos-deploy)
mkdir -p $tmp_dir/{deploy,target,sync}

# Create an SSH key to use for deployment automation
deploy_prv_key="$tmp_dir/deploy/id_ed25519"
deploy_pub_key="$tmp_dir/deploy/id_ed25519.pub"
ssh-keygen -t ed25519 -f $deploy_prv_key -C "$USER@$HOSTNAME" -N ""
ssh-keygen -R $target_host
ssh $target_host -l root -i $deploy_prv_key -o StrictHostKeyChecking=no "\
  mkdir -p /root/.ssh;\
  echo $(cat $deploy_pub_key) > /root/.ssh/authorized_keys;\
  nix-env -f '<nixpkgs>' -iA rsync git jq"

# Write params file
echo "target_hostname=$target_hostname" | tee -a $tmp_dir/target/params
echo "nix_config_repo=$nix_config_repo" | tee -a $tmp_dir/target/params
echo "nix_secret_repo=$nix_secret_repo" | tee -a $tmp_dir/target/params

# Include required files
cp $disko_file \
  $script_dir/*remote_script \
  $tmp_dir/target/.

# Copy files over
ssh_run "rm -rf /tmp/{target,sync,private}"
my_rsync $tmp_dir/target root@$target_host:/tmp/.
ssh_run "echo $encryption_passphrase | tee -a /tmp/encryption_passphrase"

### SSH keys and github access
# Script to create SSH keys
ssh_run "/tmp/target/0_remote_script"
my_rsync root@$target_host:/tmp/sync $tmp_dir/

# Grant public key access to github
github_pubkey_data=$(cat $tmp_dir/sync/id_ed25519.pub)
github_pubkey_title="nixos-${target_hostname}-$(date +%s)"
curl -H "Authorization: token $github_token" --data \
	"{\"title\":\"$github_pubkey_title\",\"key\":\"$github_pubkey_data\"}" \
	https://api.github.com/user/keys

### Base image installation
ssh_run "/tmp/target/1_remote_script"


#git clone $_NIXOS_CONFIG $_MNT_DIR/etc/nixos
#
## Build
##nixos-install --root $_MNT_DIR --no-root-password --flake ${_NIXOS_CONFIG}#$_HOSTNAME
#nixos-install --root $_MNT_DIR --flake ${_NIXOS_CONFIG}#$_HOSTNAME
#
### Reboot
#reboot
#
##rsync -vP --chmod=644 --rsync-path="mkdir -p /root/.ssh/ && rsync" \
##  $master_id_file.pub root@$target_host:/root/.ssh/
read
